var fs = require('fs')
var connectionPoolFactory = require('connection-pool-factory')
var camelize = require('camelize')
var wrapPromise = require('wrap-promise')
var denodeify = require('then-denodeify')

var pool = connectionPoolFactory({
	host: '127.0.0.1',
	user: 'root',
	password: '',
	database: 'pos'
})

const getConnectionPromise = denodeify(cb => pool.getConnection(cb))


module.exports.pool = pool
module.exports.promise = {
	singleConnection: promiseSingleConnection
}
module.exports.singleConnection = singleConnection

const modulesWithNames = fs.readdirSync('server/db')
	.filter(file => /^.+-db\.js$/.test(file))
	.map(filename => {
		const name = camelize(filename.substring(0, filename.length - '-db.js'.length))
		const dbModule = require('../db/' + filename)
		return {
			name,
			dbModule
		}
	})

modulesWithNames.forEach(({ dbModule, name }) => {
	const functions = createDbModuleObject(dbModule, pool)

	module.exports[name] = functions.callback
	module.exports.promise[name] = functions.promise
})


// need a version that returns a promise for the single-connection modules,
// and those should all be the promisified version

// regular version should return the regular db function object
function singleConnection() {
	return function(cb) {
		pool.getConnection((err, connection) => {
			if (err) return cb(err)

			cb(null, singleConnectionObject(connection))
		})
	}
}

function promiseSingleConnection() {
	return getConnectionPromise().then(connection => {
		return singleConnectionObject(connection).promise
	})
}

function singleConnectionObject(connection) {
	const db = {
		promise: {}
	}

	modulesWithNames.forEach(({ dbModule, name }) => {
		const functions = createDbModuleObject(dbModule, connection)

		db[name] = functions.callback
		db.promise[name] = functions.promise
	})

	return db
}

function createDbModuleObject(dbModule, connection) {
	const dbFunctions = dbModule(connection)

	const promiseFunctions = Object.keys(dbFunctions).reduce((o, key) => {
		const fn = dbFunctions[key]
		o[key] = denodeify(fn, wrapPromise)
		return o
	}, {})

	return {
		callback: dbFunctions,
		promise: promiseFunctions
	}
}
