const db = require('db')
const all = require('all')

module.exports = function savePlantMove({userId, accountId, plantMoveDocument}, cb) {
	// load current plants locked for update
	// insert plant move records with old room and new room
	// update plants to reference the new room
	// commit
	return db.promise.getTransaction().then(connection => {
		return connection.account.loadByUserId(userId).then(account => {

			return connection.plant.loadByTag({
				tagNumber: plantMoveDocument.plantTags,
				accountId: account.accountId,
				tagScope: account.defaultTagScope,
				lock: true
			}).then(plants => {
				const plantsToActuallySave = plants.filter(plant => plant.roomId !== plantMoveDocument.room.roomId)

				if (plantsToActuallySave.length === 0) {
					return connection.transaction.rollback()
				}

				const newPlantMoveRows = getPlantMoveRows(plantMoveDocument, plantsToActuallySave)
				const plantUpdates = getPlantRowUpdates(plantMoveDocument, plantsToActuallySave)

				return all({
					plantMoveRows: connection.plantMove.insertRows(newPlantMoveRows),
					plantUpdates: Promise.all(plantUpdates.map(plantToSave => connection.plant.save(plantToSave) ))
				}).then(saved => {
					return connection.transaction.commit().then(() => saved)
				})
			})
		}).catch(function error(err) {
			console.error(err)
			return connection.transaction.rollback().then(() => Promise.reject(err))
		})
	}).then(result => cb(null, result), cb)
}

function getPlantMoveRows(plantMoveDocument, plants) {
	const date = new Date()
	return plants.map(plant => {
		return {
			plantId: plant.plantId,
			fromRoomId: plant.roomId,
			toRoomId: plantMoveDocument.room.roomId,
			date
		}
	})
}

function getPlantRowUpdates(plantMoveDocument, plants) {
	return plants.map(plant => {
		return {
			plantId: plant.plantId,
			version: plant.version,
			roomId: plantMoveDocument.room.roomId
		}
	})
}
