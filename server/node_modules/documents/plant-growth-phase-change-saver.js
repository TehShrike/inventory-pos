const db = require('db')
const all = require('all')

module.exports = function savePlantGrowthPhaseChange({userId, growthPhaseChangeDocument}, cb) {
	return db.promise.getTransaction().then(connection => {
		return connection.account.loadByUserId(userId).then(account => {

			return connection.plant.loadByTag({
				tagNumber: growthPhaseChangeDocument.plantTags,
				accountId: account.accountId,
				tagScope: account.defaultTagScope
			}).then(plants => {
				const newGrowthPhaseChangeRows = getPhaseChangeRows(growthPhaseChangeDocument, plants)

				const plantsToUpdate = getPlantRowUpdates(growthPhaseChangeDocument, plants)

				return all({
					growthPhaseChangeRows: connection.plantGrowthPhaseChange.insertRows(newGrowthPhaseChangeRows),
					plantUpdates: Promise.all(plantsToUpdate.map(plantToSave => connection.plant.save(plantToSave) ))
				}).then(saved => {
					return connection.transaction.commit().then(() => saved)
				})
			})
		}).catch(function error(err) {
			console.error(err)
			return connection.transaction.rollback().then(() => Promise.reject(err))
		})
	}).then(result => cb(null, result), cb)
}

function getPhaseChangeRows(growthPhaseChangeDocument, plants) {
	const date = new Date()
	return plants.map(plant => {
		return {
			plantId: plant.plantId,
			fromGrowthPhase: plant.growthPhase,
			toGrowthPhase: growthPhaseChangeDocument.growthPhase,
			date
		}
	})
}

function getPlantRowUpdates(growthPhaseChangeDocument, plants) {
	return plants.map(plant => {
		return {
			plantId: plant.plantId,
			version: plant.version,
			growthPhase: growthPhaseChangeDocument.growthPhase
		}
	})
}
